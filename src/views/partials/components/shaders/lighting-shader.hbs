<script type="x-shader/x-vertex" id="vertexshader">
	#define PI 3.141592653589793

	uniform vec4 scale;

	varying highp vec2 v_Uv;
  varying vec3 v_Norm;
  varying vec3 v_FragPos;
  varying vec3 v_viewPos;

  mat4 rotateX(float angle) {
    return mat4(
      1, 0, 0, 0,
      0, cos(angle), -sin(angle), 0,
      0, sin(angle),  cos(angle), 0,
      0, 0, 0, 1
    );
  }

  mat4 rotateY(float angle) {
    return mat4(
      cos(angle), sin(angle), 0, 0,
      0, 1, 0, 0,
      -sin(angle),  0, cos(angle), 0,
      0, 0, 0, 1
    );
  }

  mat4 rotateZ(float angle) {
    return mat4(
      cos(angle), -sin(angle), 0, 0,
      sin(angle),  cos(angle), 0, 0,
      0, 0, 1, 0,
      0, 0, 0, 1
    );
  }


	void main() {
     // local space
		vec4 pos = vec4( position, 1.0 );
    //pos*=rotateZ(PI/1.5);

    vec4 testNorm = vec4(normal, 0.0);
    //testNorm*=rotateZ(PI/1.5);

    // local space to world space
    v_FragPos = vec3(modelMatrix * pos);
    v_viewPos = cameraPosition;

		v_Uv = uv;
    //v_Norm = normal;
    v_Norm = (modelMatrix * testNorm).xyz;

		gl_Position = projectionMatrix * modelViewMatrix * pos;
	}
</script>

<script type="x-shader/x-fragment" id="fragmentshader">
struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

struct Light {
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Material material;

uniform Light light;

uniform vec2 u_resolution;
uniform vec3 ambientColor;
uniform float ambientStrength;


varying highp vec2 v_Uv;
varying vec3 v_Norm;
varying vec3 v_FragPos;
varying vec3 v_viewPos;

void main() {
  float specularStrength = 0.5;

	vec2 st = gl_FragCoord.xy/u_resolution.xy;
	st.x *= u_resolution.x/u_resolution.y;

  vec3 ambient = (material.ambient * light.ambient);

  vec3 norm = normalize(v_Norm);
  vec3 lightDir = normalize(-light.direction);

  vec3 viewDir = normalize(v_viewPos - v_FragPos);
  vec3 reflectDir = reflect(-lightDir, norm);

  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = (spec * material.specular) * light.specular;

  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = (diff * material.diffuse) * light.diffuse;
  vec3 result = (ambient + diffuse + specular);

  //vec3 result = vec3(0.,0.3, 0.5) * ambient;

  gl_FragColor = vec4(result, 1.0);
	//gl_FragColor = vec4(v_Norm, 1.0);
}
</script>