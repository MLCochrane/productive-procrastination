<script type="x-shader/x-vertex" id="vertexshader">
	#define PI 3.141592653589793
	varying highp vec2 vUv;
	varying vec3 vertexColor;
	varying vec3 newNorm;
	varying vec3 vNorm;

	uniform float time;
	uniform vec4 scale;

	float kExp1 = 2.5;
	float speed1 = .8;
	float amp = 0.5;
	float w = .8;

	float kExp2 = 7.;
	float kExp3 = 10.;
	float kExp4 = 5.;

	float speed2 = 1.2;
	float speed3 = .5;
	float speed4 = .9;



	float wave(vec2 dir, float x, float y, float t, float k, float speed) {
		float base = sin(dot(dir, vec2(x, y)) * w + t * speed) + 1.0;
		return (2. * amp) * pow(base / 2., k);
	}

	float wavePartDerX(vec2 dir, float x, float y, float t, float k, float speed) {
		float internalWave = dot(dir, vec2(x, y)) * w + t * speed;
		return k * dir.x * w * amp * (pow((sin(internalWave) + 1.0) / 2., k - 1.0)) * cos(internalWave);
	}

	float wavePartDerY(vec2 dir, float x, float y, float t, float k, float speed) {
		float internalWave = dot(dir, vec2(x, y)) * w + t * speed;
		return k * dir.y * w * amp * (pow((sin(internalWave) + 1.0) / 2., k - 1.0)) * cos(internalWave);
	}

	float wave2(vec2 dir, float x, float y, float t) {
		return 0.5 * sin(dot(dir, vec2(x, y)) + t * 0.3);
	}

	void main() {
		vUv = uv;
		vec2 dir = vec2(1.0, 0.);
		vec2 dir2 = vec2(.8, 0.5);
		vec2 dir3 = vec2(.9, 0.2);
		vec2 dir4 = vec2(.7, 0.5);

		vec4 pos = vec4( position, 1.0 ) * scale;

		float waveResOne = wave(dir, pos.x, pos.y, time, kExp1, speed1);
		float waveResTwo = wave(dir2, pos.x, pos.y, time, kExp2, speed2);

		float waveResThree = wave(dir3, pos.x, pos.y, time, kExp3, speed3);
		float waveResFour = wave(dir4, pos.x, pos.y, time, kExp4, speed4);

		float sum1 = mix(waveResOne, waveResTwo, sin(time * 0.01) * -1.);
		float sum2 = mix(waveResThree, waveResFour, sin(time * 0.01) * -1.);

		pos.z += mix(sum1, sum2, sin(time * 0.01) * -1.);
		//pos.z += wave2(dir, pos.x, pos.y, time);
		vNorm = pos.xyz;
		//newNorm = cross(vec3(1.0, 0.0, 0.5 * cos(dot(dir, vec2(pos.x, pos.y)) + time * 0.3)), vec3(0.0, 1.0, 0.5 * cos(dot(dir, vec2(pos.x, pos.y)) + time * 0.3)));
		newNorm = cross(vec3(1.0, 0.0, wavePartDerX(dir, pos.x, pos.y, time, kExp1, speed1)), vec3(0.0, 1.0, wavePartDerY(dir, pos.x, pos.y, time, kExp1, speed1)));
		newNorm += cross(vec3(1.0, 0.0, wavePartDerX(dir2, pos.x, pos.y, time, kExp2, speed2)), vec3(0.0, 1.0, wavePartDerY(dir2, pos.x, pos.y, time, kExp2, speed2)));
		newNorm += cross(vec3(1.0, 0.0, wavePartDerX(dir3, pos.x, pos.y, time, kExp3, speed3)), vec3(0.0, 1.0, wavePartDerY(dir3, pos.x, pos.y, time, kExp3, speed3)));
		newNorm += cross(vec3(1.0, 0.0, wavePartDerX(dir4, pos.x, pos.y, time, kExp4, speed4)), vec3(0.0, 1.0, wavePartDerY(dir4, pos.x, pos.y, time, kExp4, speed4)));
		gl_Position = projectionMatrix * modelViewMatrix * pos;
	}
</script>

<script type="x-shader/x-fragment" id="fragmentshader">
uniform vec2 u_resolution;
uniform sampler2D texOne;
uniform sampler2D texTwo;

varying highp vec2 vUv;
varying vec3 vertexColor;
varying vec3 newNorm;
varying vec3 vNorm;

void main() {
	vec2 st = gl_FragCoord.xy/u_resolution.xy;
	st.x *= u_resolution.x/u_resolution.y;

	// vec3 texel0 = texture2D(texOne, vUv).rgb;
	// vec4 texel1 = texture2D(texTwo, vUv);
	gl_FragColor = vec4((newNorm * 0.5) + 0.5, 1.0);
}
</script>
<div class="wrapper">
  <div class="canvas-container">
    <canvas id="Sandbox"></canvas>
  </div>
</div>

